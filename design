---
Syntax
---

Blocks of code
    ({[<>]})


---
Semantics
---

Stack snapshots.
    At different points, a snapshot is taken of the stack.
    Registers A-B-C give the top three elements of the previous snapshot
    Registers D-E-F give the one before
    Snapshot can be restored to a specific state when commanded so

Block kinds:
    Imploding block takes argument, n, and implodes stak by N and THEN saves argument context.


---
Functions
---

int-and-add: string->int->int or string->string->int; cast both to int, add

group-together: list->list; [(a,b),(a,c),(b,d),(c,e),(c,f)]->[(a,(a,c)),(b,d),(c,(e,f))]

type-unaware-equals: Coerce as good as possible and comapre types.

halve: x -> x/2? double?

is-positive?

sort-by and arg-sort.

call-and-return-n -- call a function, return the top n arguments.

---
Automatic Compression
---

A function on the top of the stack at the end should be called with map.

Type functions on the stack? Map and reduce could be on the same word.

Lots of combinations produce identical results.
 - "dup swap", or "* drop" where "*" freshly pushes a new value are equal to just ""
 - "2 multiply" and "dup add" are the same
 - If can statically detect arg-a and dup are identical, only use one.
 - Range butfirst => range-from-1 butfirst


---
Code Compression
---

It doesn't make sense to run some functions in non-stack-restoring mode (e.g., do-while, ite).

Right now the assumption is that the probability you will push an integer (or start a new function)
  is equal even if there are more builtins you could call. Maybe this isn't the case.
  This is because integers and function starts are given N% of the arithmetic space initially.

Instead of length-encoding the first function, add a 1 bit to the end, and then pad to 0 mod 8.
  Only adds 1 bit to functions on average.

---
IO
---
Smart parsing and dumping:
 - The empty program must be the identity operator.

---
Random
---

When a function is not stack restoring, it should be forced right away. 
Otherwise, we won't know the right types. It'll also be very strange to ever want it delayed.