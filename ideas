---
Syntax
---



---
Semantics
---

Stack snapshots.
    At different points, a snapshot is taken of the stack.
    Registers A-B-C give the top three elements of the previous snapshot
    Registers D-E-F give the one before
    Snapshot can be restored to a specific state when commanded so

Block kinds:
    Imploding block takes argument, n, and implodes stak by N and THEN saves argument context.


---
Functions
---

int-and-add: string->int->int or string->string->int; cast both to int, add

group-together: list->list; [(a,b),(a,c),(b,d),(c,e),(c,f)]->[(a,(a,c)),(b,d),(c,(e,f))]

type-unaware-equals: Coerce as good as possible and comapre types.

halve: x -> x/2? double?

is-positive?

sort-by and arg-sort.

call-and-return-n -- call a function, return the top n arguments.

fixpoint at most N times

Join with newline, join with space, join with empty string

---
Automatic Compression
---

A function on the top of the stack at the end should be called with map.

Right now we assume all code paths are executed on the compilation run. We may need >1.

Type functions on the stack? Map and reduce could be on the same word.

Lots of combinations produce identical results.
 - "dup swap", or "* drop" where "*" freshly pushes a new value are equal to just ""
 - "2 multiply" and "dup add" are the same
 - If can statically detect arg-a and dup are identical, only use one.
 - Range butfirst => range-from-1 butfirst

It doesn't make sense for an exploding block if the first argument is an integer...

---
Code Compression
---

It doesn't make sense to run some functions in non-stack-restoring mode (e.g., do-while, ite).

Right now the assumption is that the probability you will push an integer (or start a new function)
  is equal even if there are more builtins you could call. Maybe this isn't the case.
  This is because integers and function starts are given N% of the arithmetic space initially.

Function lengths are currently geometric. Should the instead be poisson? Something else?

How to decide resulting type kind when you concatenate a list and a string?

Other types of ints:
  integer - what I have now -- full precision integers
  exact - an exact decimal number, with N digits o precision (set by user)
  float - 32 bit floting point
  double - 64 bit floating point
  int32 - 32 bit int (signed or unsigned)
  int64 - 64 bit int (signed or unsigned)

Right now adding one bit to an integer takes two more bits. 
It would be good to have two kinds of integers. 
 - One which is better for "normal" integers you might type (<1000 or so)
 - One for "large" integers, sized in bytes.

---
IO
---
Smart parsing and dumping:
 - The empty program must be the identity operator.

---
Random
---

